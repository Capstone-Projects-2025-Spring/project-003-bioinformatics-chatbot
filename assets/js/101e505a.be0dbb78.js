"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[4171],{71788:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var t=i(74848),s=i(28453);const a={sidebar_position:5},r="Database Design",o={id:"system-architecture/Database-Design",title:"Database Design",description:"This document is a summary of the database design for the project",source:"@site/docs/system-architecture/Database-Design.md",sourceDirName:"system-architecture",slug:"/system-architecture/Database-Design",permalink:"/project-003-bioinformatics-chatbot/docs/system-architecture/Database-Design",draft:!1,unlisted:!1,editUrl:"https://github.com/Capstone-Projects-2025-Spring/project-003-bioinformatics-chatbot/edit/main/documentation/docs/system-architecture/Database-Design.md",tags:[],version:"current",lastUpdatedBy:"Ishmam Kabir",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Algorithm Description",permalink:"/project-003-bioinformatics-chatbot/docs/system-architecture/Algorithm_Design"},next:{title:"Development Environment",permalink:"/project-003-bioinformatics-chatbot/docs/system-architecture/development-environment"}},l={},c=[{value:"Entity-Relation Diagram",id:"entity-relation-diagram",level:2},{value:"User Table",id:"user-table",level:3},{value:"Role Table",id:"role-table",level:3},{value:"Document Table",id:"document-table",level:3},{value:"langchain_pg_collection",id:"langchain_pg_collection",level:3},{value:"langchain_pg_embedding",id:"langchain_pg_embedding",level:3}];function d(e){const n={em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"database-design",children:"Database Design"}),"\n",(0,t.jsx)(n.p,{children:"This document is a summary of the database design for the project"}),"\n",(0,t.jsx)(n.h2,{id:"entity-relation-diagram",children:"Entity-Relation Diagram"}),"\n",(0,t.jsx)(n.mermaid,{value:"erDiagram\n    USER ||--|{ ROLE: has\n    USER {\n        int id PK\n        string username\n        string password_hash\n    }\n    ROLE\n    ROLE {\n        int id PK\n        int user_id FK\n        string role\n    }\n\n    DOCUMENT {\n        int id PK\n        string document_name\n        string file_type\n        BLOB file_contents\n    }\n\n    langchain_pg_collection {\n        uuid uuid PK\n        string name\n        json cmetadata\n    }\n    \n    langchain_pg_embedding||--|{ langchain_pg_collection: has\n    langchain_pg_embedding {\n        string id PK\n        uuid collection_id FK\n        vector embedding\n        string document\n        jsonb cmetadata\n    }\n    "}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:"Figure: Entity-Relation diagram"})}),"\n",(0,t.jsx)(n.h3,{id:"user-table",children:"User Table"}),"\n",(0,t.jsx)(n.p,{children:"Used to store admin users which will be able to upload documents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"id: int - primary key"}),"\n",(0,t.jsx)(n.li,{children:"username: string : unique username for user"}),"\n",(0,t.jsx)(n.li,{children:"password_hash: string : password stored as a hash"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"role-table",children:"Role Table"}),"\n",(0,t.jsx)(n.p,{children:"Used to store roles of Users"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"id: int - primary key"}),"\n",(0,t.jsx)(n.li,{children:"user_id: int - foreign key (User: id) : contains a relation to a user"}),"\n",(0,t.jsx)(n.li,{children:"role: string : the role of a user which brings permissions"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"document-table",children:"Document Table"}),"\n",(0,t.jsx)(n.p,{children:"Stores uploaded documents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"id: int - primary key"}),"\n",(0,t.jsx)(n.li,{children:"document_name: string: name of uploaded document"}),"\n",(0,t.jsx)(n.li,{children:"document_type: string: file extension of the document"}),"\n",(0,t.jsx)(n.li,{children:"file_contents: BLOB: the uploaded file"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"langchain_pg_collection",children:"langchain_pg_collection"}),"\n",(0,t.jsx)(n.p,{children:"Stores pg vector collections from langchain | autogenerated"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"uuid: uuid - primary key"}),"\n",(0,t.jsx)(n.li,{children:"name: string: name of the collection"}),"\n",(0,t.jsx)(n.li,{children:"metadata: json: metadata for the langchain collection"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"langchain_pg_embedding",children:"langchain_pg_embedding"}),"\n",(0,t.jsx)(n.p,{children:"Stores langchain embeddings and utilizes PGvector | autogenerated"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"id: string - primary key"}),"\n",(0,t.jsx)(n.li,{children:"collection_id: uuid - foreign key (langchain_pg_collection: uuid) : collection the embedding belongs to"}),"\n",(0,t.jsx)(n.li,{children:"embedding: vector: vector for the document embedding"}),"\n",(0,t.jsx)(n.li,{children:"document: string: document in string form that the embedding will use"}),"\n",(0,t.jsx)(n.li,{children:"cmetadata: jsonb: metadata for the embedding"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(96540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);